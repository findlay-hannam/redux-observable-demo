{"ast":null,"code":"var _jsxFileName = \"/Users/hannamf/Documents/code/redux-obs-knowledge-share/src/App.js\";\nimport React from 'react';\nimport './App.css';\nconsole.clear();\nconst PING = 'PING';\nconst PONG = 'PONG';\n\nconst ping = () => ({\n  type: PING\n});\n\nconst pingEpic = action$ => action$.ofType(PING).delay(1000) // Asynchronously wait 1000ms then continue\n.mapTo({\n  type: PONG\n});\n\nconst pingReducer = (state = {\n  isPinging: false\n}, action) => {\n  switch (action.type) {\n    case PING:\n      return {\n        isPinging: true\n      };\n\n    case PONG:\n      return {\n        isPinging: false\n      };\n\n    default:\n      return state;\n  }\n}; // components/App.js\n\n\nconst _ReactRedux = ReactRedux,\n      connect = _ReactRedux.connect;\n\nlet App = ({\n  isPinging,\n  ping\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, \"is pinging: \", isPinging.toString()), React.createElement(\"button\", {\n  onClick: ping,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, \"Start PING\"));\n\nconst mapStateToProps = ({\n  isPinging\n}) => ({\n  isPinging\n});\n\nconst mapDispatchToProps = {\n  ping\n};\nconst _ReactRedux2 = ReactRedux,\n      Provider = _ReactRedux2.Provider;\nconst _Redux = Redux,\n      createStore = _Redux.createStore,\n      applyMiddleware = _Redux.applyMiddleware;\nconst _ReduxObservable = ReduxObservable,\n      createEpicMiddleware = _ReduxObservable.createEpicMiddleware;\nconst epicMiddleware = createEpicMiddleware(pingEpic);\nconst store = createStore(pingReducer, applyMiddleware(epicMiddleware));\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default (() => React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, React.createElement(ConnectedApp, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n})));","map":{"version":3,"sources":["/Users/hannamf/Documents/code/redux-obs-knowledge-share/src/App.js"],"names":["React","console","clear","PING","PONG","ping","type","pingEpic","action$","ofType","delay","mapTo","pingReducer","state","isPinging","action","ReactRedux","connect","App","toString","mapStateToProps","mapDispatchToProps","Provider","Redux","createStore","applyMiddleware","ReduxObservable","createEpicMiddleware","epicMiddleware","store","ConnectedApp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACAC,OAAO,CAACC,KAAR;AAEA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,IAAI,GAAG,MAAb;;AAEA,MAAMC,IAAI,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEH;AAAR,CAAP,CAAb;;AAEA,MAAMI,QAAQ,GAAGC,OAAO,IACtBA,OAAO,CAACC,MAAR,CAAeN,IAAf,EACGO,KADH,CACS,IADT,EACe;AADf,CAEGC,KAFH,CAES;AAAEL,EAAAA,IAAI,EAAEF;AAAR,CAFT,CADF;;AAKA,MAAMQ,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAT,EAA+BC,MAA/B,KAA0C;AAC5D,UAAQA,MAAM,CAACT,IAAf;AACE,SAAKH,IAAL;AACE,aAAO;AAAEW,QAAAA,SAAS,EAAE;AAAb,OAAP;;AAEF,SAAKV,IAAL;AACE,aAAO;AAAEU,QAAAA,SAAS,EAAE;AAAb,OAAP;;AAEF;AACE,aAAOD,KAAP;AARJ;AAUD,CAXD,C,CAaA;;;oBAEoBG,U;MAAZC,O,eAAAA,O;;AAER,IAAIC,GAAG,GAAG,CAAC;AAAEJ,EAAAA,SAAF;AAAaT,EAAAA;AAAb,CAAD,KACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiBS,SAAS,CAACK,QAAV,EAAjB,CADF,EAEE;AAAQ,EAAA,OAAO,EAAEd,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF;;AAOA,MAAMe,eAAe,GAAG,CAAC;AAAEN,EAAAA;AAAF,CAAD,MAAoB;AAAEA,EAAAA;AAAF,CAApB,CAAxB;;AACA,MAAMO,kBAAkB,GAAG;AAAEhB,EAAAA;AAAF,CAA3B;qBAEqBW,U;MAAbM,Q,gBAAAA,Q;eACiCC,K;MAAjCC,W,UAAAA,W;MAAaC,e,UAAAA,e;yBACYC,e;MAAzBC,oB,oBAAAA,oB;AAER,MAAMC,cAAc,GAAGD,oBAAoB,CAACpB,QAAD,CAA3C;AAEA,MAAMsB,KAAK,GAAGL,WAAW,CAACZ,WAAD,EACvBa,eAAe,CAACG,cAAD,CADQ,CAAzB;AAIA,MAAME,YAAY,GAAGb,OAAO,CAACG,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CH,GAA7C,CAArB;AAEA,gBAAe,MACb,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEW,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwB,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAxB,CADF","sourcesContent":["import React from 'react';\nimport './App.css';\nconsole.clear();\n\nconst PING = 'PING';\nconst PONG = 'PONG';\n\nconst ping = () => ({ type: PING });\n\nconst pingEpic = action$ =>\n  action$.ofType(PING)\n    .delay(1000) // Asynchronously wait 1000ms then continue\n    .mapTo({ type: PONG });\n\nconst pingReducer = (state = { isPinging: false }, action) => {\n  switch (action.type) {\n    case PING:\n      return { isPinging: true };\n\n    case PONG:\n      return { isPinging: false };\n\n    default:\n      return state;\n  }\n};\n\n// components/App.js\n\nconst { connect } = ReactRedux;\n\nlet App = ({ isPinging, ping }) => (\n  <div>\n    <h1>is pinging: {isPinging.toString()}</h1>\n    <button onClick={ping}>Start PING</button>\n  </div>\n);\n\nconst mapStateToProps = ({ isPinging }) => ({ isPinging });\nconst mapDispatchToProps = { ping };\n\nconst { Provider } = ReactRedux;\nconst { createStore, applyMiddleware } = Redux;\nconst { createEpicMiddleware } = ReduxObservable;\n\nconst epicMiddleware = createEpicMiddleware(pingEpic);\n\nconst store = createStore(pingReducer,\n  applyMiddleware(epicMiddleware)\n);\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default () => (\n  <Provider store={store}><ConnectedApp /></Provider>\n);\n"]},"metadata":{},"sourceType":"module"}